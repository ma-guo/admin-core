package daos

// Generated by niuhe.idl

import (
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/niuhe"
)

// 文章-内容管理
type _SysDocumentDao struct {
	*Dao
}

// 文章-内容管理
func (dao *Dao) SysDocument() *_SysDocumentDao {
	return &_SysDocumentDao{Dao: dao}
}

// 根据ID获取数据
func (dao *_SysDocumentDao) GetByIds(ids ...int64) ([]*models.SysDocument, error) {
	rows := []*models.SysDocument{}
	session := dao.db()
	err := session.In("id", ids).Desc("`id`").Find(&rows)
	if err != nil {
		niuhe.LogInfo("GetByIds SysDocument error: %v", err)
		return nil, err
	}
	return rows, nil
}

// 分页获取数据
func (dao *_SysDocumentDao) GetPage(page, size int, name string) ([]*models.SysDocument, int64, error) {
	rows := make([]*models.SysDocument, 0)
	session := dao.db()
	dao.Like(session, "`name`", name)
	dao.Limit(session, page, size)
	total, err := session.Desc("`id`").FindAndCount(&rows)
	if err != nil {
		niuhe.LogInfo("GetPage SysDocument error: %v", err)
		return nil, 0, err
	}
	return rows, total, nil
}

// 获取最后一条草稿
func (dao *_SysDocumentDao) GetLastDraft(docId int64) (*models.SysDraft, error) {
	item := &models.SysDraft{
		DocId: docId,
	}
	has, err := dao.db().Desc("`id`").Get(item)
	if err != nil {
		return nil, err
	} else if !has {
		return nil, nil
	}
	return item, nil
}

// 分页获取文章对应的草稿
func (dao *_SysDocumentDao) GetDraftPage(docId int64, page, size int) ([]*models.SysDraft, int64, error) {
	rows := make([]*models.SysDraft, 0)
	session := dao.db().Where("`doc_id` = ?", docId)
	dao.Limit(session, page, size)
	total, err := session.Desc("`id`").FindAndCount(&rows)
	if err != nil {
		niuhe.LogInfo("GetDraftPage SysDraft error: %v", err)
		return nil, 0, err
	}
	return rows, total, nil
}

// 删除草稿
func (dao *_SysDocumentDao) DeleteDraft(docIds ...int64) error {
	_, err := dao.db().Where("`doc_id` in (?)", docIds).Delete(&models.SysDraft{})
	return err
}
