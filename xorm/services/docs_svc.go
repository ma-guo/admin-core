package services

// Generated by niuhe.idl

import (
	"github.com/ma-guo/niuhe"

	"github.com/ma-guo/admin-core/xorm/models"
)

// 文章-内容管理
type _SysDocsSvc struct {
	*_Svc
}

// 文章-内容管理
func (svc *_Svc) SysDocument() *_SysDocsSvc {
	_svc := &_SysDocsSvc{svc}
	_svc.prefix = "SysDocument"
	return _svc
}

func (svc *_SysDocsSvc) caches(rows ...*models.SysDocument) {
	if len(rows) >= 100 {
		return
	}
	for _, row := range rows {
		svc.dao().SetCache(row, svc.prefix, "id", row.Id)
	}
}

// 获取单个数据
func (svc *_SysDocsSvc) GetById(id int64) (*models.SysDocument, bool, error) {
	if id <= 0 {
		return nil, false, nil
	}
	if cache, has := svc.dao().GetCache(svc.prefix, "id", id); has {
		return cache.(*models.SysDocument), true, nil
	}
	row := &models.SysDocument{Id: id}
	has, err := svc.dao().GetBy(row)
	if err != nil {
		niuhe.LogInfo("GetById SysDocument error: %v", err)
	}
	if has {
		svc.caches(row)
	}
	return row, has, err
}

// 获取单个数据
func (svc *_SysDocsSvc) GetBy(row *models.SysDocument) (bool, error) {
	has, err := svc.dao().GetBy(row)
	if err != nil {
		niuhe.LogInfo("GetBy SysDocument error: %v", err)
	}
	if has {
		svc.caches(row)
	}
	return has, err
}

// 更新数据
func (svc *_SysDocsSvc) Update(row *models.SysDocument) (bool, error) {
	has, err := svc.dao().Update(row.Id, row)
	if err != nil {
		niuhe.LogInfo("Update SysDocument error: %v", err)
	}
	// 缓存数据
	svc.caches(row)
	// 插入草稿
	draft, err := svc.dao().SysDocument().GetLastDraft(row.Id)
	if err != nil {
		niuhe.LogInfo("GetLastDraft SysDraft error: %v", err)
		return has, err
	}
	version := 1
	if draft != nil {
		version = draft.Version + 1
	}
	_, err = svc.dao().Insert(&models.SysDraft{
		DocId:    row.Id,
		Name:     row.Name,
		Markdown: row.Markdown,
		Version:  version,
	})
	if err != nil {
		niuhe.LogInfo("Insert SysDraft error: %v", err)
		return has, err
	}
	return has, err
}

// 插入数据
func (svc *_SysDocsSvc) Insert(rows ...*models.SysDocument) error {
	if len(rows) == 1 {
		_, err := svc.dao().InsertOne(rows[0])
		if err != nil {
			niuhe.LogInfo("Insert SysDocument error: %v", err)
			return err
		}
	} else {
		_, err := svc.dao().Insert(rows)
		if err != nil {
			niuhe.LogInfo("Insert SysDocument error: %v", err)
			return err
		}
	}
	for _, row := range rows {
		niuhe.LogInfo("Insert SysDocument %v, %v", row, row.Id)
	}
	// 缓存数据
	// svc.caches(rows...)
	// 插入草稿
	drafts := make([]*models.SysDraft, 0)
	for _, row := range rows {
		drafts = append(drafts, &models.SysDraft{
			DocId:    row.Id,
			Name:     row.Name,
			Markdown: row.Markdown,
			Version:  1,
		})
	}
	_, err := svc.dao().Insert(drafts)
	if err != nil {
		niuhe.LogInfo("Insert SysDraft error: %v", err)
		return err
	}
	return nil
}

// 删除数据
func (svc *_SysDocsSvc) Delete(rows ...*models.SysDocument) error {
	if len(rows) == 0 {
		return nil
	}
	ids := make([]int64, 0)
	for _, row := range rows {
		ids = append(ids, row.Id)
	}
	_, err := svc.dao().Delete(ids, &models.SysDocument{})
	if err != nil {
		niuhe.LogInfo("Delete SysDocument error: %v", err)
	}
	for _, row := range rows {
		svc.dao().DeleteCache(svc.prefix, "id", row.Id)
	}
	// 删除草稿
	err = svc.dao().SysDocument().DeleteDraft(ids...)
	if err != nil {
		niuhe.LogInfo("DeleteDraft SysDraft error: %v", err)
		return err
	}
	return err
}

// 根据 id 获取 map 数据
func (svc *_SysDocsSvc) GetByIds(ids ...int64) (map[int64]*models.SysDocument, error) {
	rowsMap := make(map[int64]*models.SysDocument, 0)
	if len(ids) == 0 {
		return rowsMap, nil
	}
	rows, err := svc.dao().SysDocument().GetByIds(ids...)
	if err != nil {
		niuhe.LogInfo("GetByIds SysDocument error: %v", err)
		return nil, err
	}
	for _, row := range rows {
		rowsMap[row.Id] = row
	}
	svc.caches(rows...)
	return rowsMap, nil
}

// 分页获取数据
func (svc *_SysDocsSvc) GetPage(page, size int, name string) ([]*models.SysDocument, int64, error) {
	rows, total, err := svc.dao().SysDocument().GetPage(page, size, name)
	if err != nil {
		niuhe.LogInfo("GetPage SysDocument error: %v", err)
	}
	svc.caches(rows...)
	return rows, total, nil
}

// 分页获取草稿
func (svc *_SysDocsSvc) GetDraftPage(docId int64, page, size int) ([]*models.SysDraft, int64, error) {
	return svc.dao().SysDocument().GetDraftPage(docId, page, size)
}
