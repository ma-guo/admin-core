package views

// Generated by niuhe.idl

import (
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/config"
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type Document struct {
	_Gen_Document
}

// 分页查询获取内容管理信息
func (v *Document) Page_GET(c *niuhe.Context, req *protos.DocumentPageReq, rsp *protos.DocumentPageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, total, err := svc.SysDocument().GetPage(req.Page, req.Size, req.Name)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	rsp.Items = make([]*protos.DocumentItem, 0, len(rows))
	for _, row := range rows {
		rsp.Items = append(rsp.Items, row.ToProto(nil, config.Config.Host))
	}
	return nil
}

// 分页查询草稿信息
func (v *Document) DraftPage_GET(c *niuhe.Context, req *protos.DocumentDragePageReq, rsp *protos.DocumentPageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	doc, has, err := svc.SysDocument().GetById(req.DocId)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if !has {
		return niuhe.NewCommError(-1, "Not Found")
	}

	rows, total, err := svc.SysDocument().GetDraftPage(req.DocId, req.Page, req.Size)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	rsp.Items = make([]*protos.DocumentItem, 0, len(rows))
	for _, row := range rows {
		item := row.ToProto(nil, config.Config.Host)
		if item.Name == "" {
			item.Name = doc.Name
		}
		rsp.Items = append(rsp.Items, item)
	}
	return nil
}

// 查询获取内容管理信息
func (v *Document) Form_GET(c *niuhe.Context, req *protos.DocumentFormReq, rsp *protos.DocumentItem) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, has, err := svc.SysDocument().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if !has {
		return niuhe.NewCommError(-1, "Not Found")
	}
	row.ToProto(rsp, config.Config.Host)
	return nil
}

// 添加内容管理信息
func (v *Document) Add_POST(c *niuhe.Context, req *protos.DocumentItem, rsp *protos.DocumentItem) error {
	svc := services.NewSvc()
	defer svc.Close()
	row := &models.SysDocument{
		Name:     req.Name,
		Markdown: req.Markdown,
		Html:     req.Html,
	}
	err := svc.SysDocument().Insert(row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	row.ToProto(rsp, config.Config.Host)
	return nil
}

// 更新内容管理信息
func (v *Document) Update_POST(c *niuhe.Context, req *protos.DocumentItem, rsp *protos.DocumentItem) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, has, err := svc.SysDocument().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if !has {
		return niuhe.NewCommError(-1, "Not Found")
	}
	row.Name = req.Name
	row.Markdown = req.Markdown
	row.Html = req.Html
	_, err = svc.SysDocument().Update(row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	row.ToProto(rsp, config.Config.Host)
	return nil
}

// 删除内容管理信息
func (v *Document) Delete_DELETE(c *niuhe.Context, req *protos.DocumentDeleteReq, rsp *protos.DocumentNoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rowsMap, err := svc.SysDocument().GetByIds(req.Ids...)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rows := make([]*models.SysDocument, 0)
	for _, row := range rowsMap {
		rows = append(rows, row)
	}
	err = svc.SysDocument().Delete(rows...)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}
func init() {
	GetModule().Register(&Document{})
}
